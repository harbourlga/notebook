nginx

什么是nginx
   nginx是一个轻量高性能的反向代理web服务器，可以实现高效的反向代理、负载均衡，可以处理2-3w并发连接

为什么用nginx
   1⃣️内存消耗少，开启10个nginx才占150m内存，处理静态文件好，耗费内存少
   2⃣️内置心跳检测功能，会对目标服务做定时定期检查，如果目标服务器宕机将不会把请求发到该服务器
   3⃣️节省带宽：支持gzip压缩，可以添加浏览器本地缓存
   4⃣️稳定性高宕机概率低
   5⃣️接收用户请求是异步非阻塞的

为什么nginx的性能这么高
   1⃣️采用异步非阻塞的事件处理机制，使用了epoll模型和大量底层代码优化
   2⃣️nginx不使用阻塞式的一个进程对应一个请求来处理请求事件，而是采用一个master进程，多个worker进程模式。（pytrpc也是采用这种模式）
            a.master进程主要负责收集、分发请求。每当一个请求过来时，master就拉起一个worker进程负责处理这个请求。
			b.同时master进程也负责监控woker的状态，保证高可靠性
			c.woker进程一般设置为跟cpu核心数一致。nginx的woker进程在同一时间可以处理的请求数只受内存限制，可以处理多个请求。
	 每进来一个request请求，master会拉取一个worker进程负责处理该请求，不过这个处理不是全程的。处理到可能有io操作阻塞的地方，比如向上游服务转发请求，并等待请求结果返回，该worker进程不会一直在这里等待，而是会注册一个事件：“如果upstream返回了，告诉我一声，我再接着干”。注册完事件之后该worker进程就去休息或者接待别的请求，直到上游服务请求结果返回触发了该事件，worker进程就会继续接手该request的处理
   
   3⃣️为什么nginx不使用多线程
        Apache服务器：会为每个请求创建线程或进程，并发过大的时候会耗光服务器资源
        nginx服务器：采用单线程来异步非阻塞处理请求(管理员可以配置Nginx主进程的工作进程的数量)(epoll)。不会为每个请求单独分配cpu和内存资源，节省了大量资源，同时也减少了大量的CPU的上下文切换。所以才使得Nginx支持更高的并发。

nginx是如何处理一个请求的：
   1⃣️首先，nginx在启动时，会解析配置文件，得到需要监听的端口与ip地址(server模块)，然后在nginx的master进程里面，先初始化好这个监控的socket(创建socket，设置addrreuse等选项，绑定到指定的ip地址端口，再listen)，然后再fork(一个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程 )出多个子进程出来，然后子进程会竞争accept新的连接。

   2⃣️此时，客户端就可以向nginx发起连接了。当客户端与nginx进行三次握手，与nginx建立好一个连接后，此时，某一个子进程会accept成功，得到这个建立好的连接的socket，然后创建nginx对连接的封装，即ngx_connection_t结构体。接着，设置读写事件处理函数并添加读写事件来与客户端进行数据的交换。最后，nginx或客户端来主动关掉连接，到此，一个连接就寿终正寝了。

   3⃣️当然，nginx也是可以作为客户端来请求其它server的数据的（如upstream模块），此时，与其它server创建的连接，也封装在ngx_connection_t中。作为客户端，nginx先获取一个ngx_connection_t结构体，然后创建socket，并设置socket的属性（ 比如非阻塞）。然后再通过添加读写事件，调用connect/read/write来调用连接，最后关掉连接，并释放ngx_connection_t。

正向代理和反向代理：
   1⃣️正向代理就是客户端发送的请求直接就到达了目标服务器，代理位于客户端，目的是为了隐藏客户端。
   2⃣️反向代理可以隐藏目标服务器，客户端的请求到达nginx之后，nginx反向代理服务器接收之后按照一定的规则分发给后端的业务处理服务器进行处理

使用反向代理服务器的优点:
   可以很好的隐藏业务服务器的存在，充当一层中间层。

nginx的优缺点：
   优点：1⃣️内存占用小，可实现高并发连接，处理响应快
        2⃣️可以实现http服务器、虚拟主机、反向代理、负载均衡
        3⃣️配置简单可快速部署
        4⃣️安全可靠，可以不暴露正式的业务服务器ip地址

   缺点：1⃣️动态处理差：nginx处理静态文件好，耗费内存少，但是处理动态页面则很鸡肋，现在一般前端用nginx作为反向代理扛住压力
        2⃣️对比apache稳定性较差，由于是一个worker进程同时处理多个请求，该进程挂掉会影响到很多用户的请求

nginx的应用场景
   1⃣️http服务器。nginx是一个http服务可以独立提供http服务。可以做网页静态服务器
   2⃣️虚拟主机。可以实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟机
   3⃣️反向代理，负载均衡。当网站的访问量到达一定的程度之后，单台服务器不能满足用户的请求时，需要使用服务器集群。该集群可以使用nginx做反向代理，并且通过nginx的请求可以平均分担到集群，不会出现某台服务器负载过高宕机而其他服务器闲置的情况。
   4⃣️可以配置安全管理，比如可以使用nginx搭建api接口网关，对每个接口服务进行拦截。

 nginx的基础架构：
    1⃣️操作nginx：master管理着工作进程，因此所有操作信号都发向master进程然后再转到worker进程
    2⃣️worker进程是如何处理请求的：
              1. 每个worker进程都是从master进程fork过来。在master进程里面，需要先建立好需要listen的socket(listenfd) 之后，再fork出多个worker进程。
              2. 所有worker进程的listenfd会在新连接到来时变得可读。为保证只有一个进程处理该连接，所有worker进程在注册listenfd读事件前先抢accept_mutex这个互斥锁，抢到锁的那个进程注册listenfd读事件，在读事件里调用accept接收该请求。
              3. 当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后断开连接。
              4. 一个请求，完全由worker进程处理，且只在一个worker进程中处理‘
    3⃣️对于一个基本的web服务器，事件通常由三种类型，分别是网络事件、信号、定时器。网络事件通过异步非阻塞解决了。

 nginx基础概念：
    1⃣️connection: 1. 几个基本名词：
                            a. ngx_connection_t: 一个结构体，每创建一个连接就通过这个结构体来添加。
                            b. worker的连接池：连接池的大小是worker_connections, 该连接池本质上就是由ngx_connection_t组成的数组，nginx通过一个链表free_connections来保存所有的空闲ngx_connection_t。
                  2. nginx是如何处理一个连接的？
                            nginx创建的连接有两种，一种是客户端对nginx的请求、另一种是nginx作为客户端来请求其它(后端服务)server的数据(upstream模块)。无论是那种，创建的连接都封装在ngx_connection_t里面。
                  3.**nginx连接数的最大值
                            单个worker进程的最大数取决于worker_connections。一个nginx能建立的最大连接数为worker_connections * worker_processes。
                  4.**nginx的最大并发数
                            对于远程客户端请求nginx最大的并发数有两种情况：如果nginx启动的反向代理，最大并发量是worker_connections * worker_processes/2。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。
                            其他普通情况，与最大连接数相等。
                  5.worker进程之间竞争锁
                            对于连接数越少的worker进程，获得竞争锁的机会越大。通过这种均衡算法来保证nginx的某个worker进程不至于把空闲连接用完，也能充分的提高多核cpu的利用率


nginx的配置文件
   1⃣️main全局配置
        user  www www; 
          #指定nginx进程使用什么用户启动

		worker_processes 4;  
		  #指定启动多少进程来处理请求，一般情况下设置成CPU的核数，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。使用grep ^processor /proc/cpuinfo | wc -l查看CPU核数。

		worker_cpu_affinity 0001 0010 0100 1000;  
		  #在高并发情况下，通过设置将CPU和具体的进程绑定来降低由于多核CPU切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。

		error_log  /data/logs/nginx_error.log  crit;  
		  #error_log是个主模块指令，用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。

		pid        /usr/local/webserver/nginx/nginx.pid;    
		  #指定进程pid文件的位置。

		worker_rlimit_nofile 65535;  
		  #用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。
   
   2⃣️events模块
         events{
			  use epoll;  
			    #use是个事件模块指令，用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选。在操作系统不支持这些高效模型时才使用select。

			  worker_connections      65536;  
			    #每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/2，所以这里客户端最大连接数是65536，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令ulimit -n 65536后worker_connections的设置才能生效。
			}
   
   3⃣️http服务器
        http{
		  include       mime.types; 
		     #include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。

		  default_type  application/octet-stream; 
		     #default_type属于HTTP核心模块指令，这里设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口。

		  charset  gb2312; 
		     #指定客户端编码格式。

		 ###HTTP参数之客户端head缓存
		  server_names_hash_bucket_size 128;
		    #服务器名字的hash表大小。

		  client_header_buffer_size 32k; 
		    #用来指定来自客户端请求头的header buffer 大小。对于大多数请求，1K的缓存已经足够了，如果自定义了消息头或有更大的cookie，可以增大缓存区大小。

		  large_client_header_buffers 4 128k; 
		    #用来指定客户端请求中较大的消息头的缓存最大数量和大小，4为个数，128k为大小，最大缓存为4个128KB。

		  client_max_body_size 10m; 
		    #客户端请求的最大的单个文件字节数。如果有上传较大文件，请设置它的限制值。

		  client_body_buffer_size 128k; 
		    #缓冲区代理缓冲用户端请求的最大字节数。

		  sendfile on ; 
		    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。开启 tcp_nopush on; 和tcp_nodelay on; 防止网络阻塞。
		  tcp_nopush on;
		  tcp_nodelay on;
		  
		  keepalive_timeout 65;
		    #长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。
		  
		  client_body_timeout 60s;
		    #用于设置客户端请求主体读取超时时间，默认是60s。如果超过这个时间，客户端还没有发送任何数据，nginx将返回Request time out(408)错误。
		  
		  send_timeout 60s;
		    #用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。
		 ###HTTP参数之客户端head缓存

		 ###HTTP参数之FastCGI参数
		 ###FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
		  fastcgi_connect_timeout 300;  
		    #指定连接到后端FastCGI的超时时间。
		  
		  fastcgi_send_timeout 300;  
		    #指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。
		  
		  fastcgi_read_timeout 300; 
		    #指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间。 
		  
		  fastcgi_buffer_size 64k;  
		    #用于指定读取FastCGI应答第一部分需要多大的缓冲区，这个值表示将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为fastcgi_buffers选项指定的缓冲区大小。
		  
		  fastcgi_buffers 4 64k;  
		    #指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。如果一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓冲区来缓存；如果页面大小大于256KB，那么大于256KB的部分会缓存到fastcgi_temp指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于硬盘。一般这个值应该为站点中PHP脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB，那么可以把这个值设置为“16 16k”、“4 64k”等。
		  
		  fastcgi_busy_buffers_size 128k;  
		    #默认值是fastcgi_buffers的两倍。
		  
		  fastcgi_temp_file_write_size 128k;  
		    #表示在写入缓存文件时使用多大的数据块，默认值是fastcgi_buffers的两倍。

		  fastcgi_cache TEST;  
		    #表示开启FastCGI缓存并为其指定一个名称。开启缓存非常有用，可以有效降低CPU的负载，并且防止502错误的发生。但是开启缓存也会引起很多问题，要视具体情况而定。

		  fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;  
		    #FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间和非活动删除时间。

		  fastcgi_cache_valid 200 302 1h;  
		  fastcgi_cache_valid 301 1d;  
		  fastcgi_cache_valid any 1m; 
		    # 用来指定应答代码的缓存时间。实例中的值表示将200和302应答缓存一个小时，将301应答缓存1天，其他应答均缓存1分钟。
		 ###HTTP参数之FastCGI参数

		 ###HTTP参数之gzip模块设置
		  gzip on;
		    #开启gzip压缩输出

	      gzip_min_length 1k;
	        #最小压缩文件大小，页面字节数从header头的Content-Length中获取。默认值为0，不管多大页面都压缩，建议设置成大于1K的字节数，小于1K可能会越压越大。

		  gzip_buffers    4 16k;
		    # 压缩缓冲区，表示申请四个16K的内存作为压缩结果流缓存，默认是申请与原始数据大小相同的内存空间来存储gzip压缩结果。

		  gzip_http_version 1.1;
		    #用于设置识别HTTP协议版本，默认是1.1，目前主流浏览器都已成指出。（默认1.1，前端如果是squid2.5请使用1.0）

		  gzip_comp_level 6;
		    #压缩等级，1压缩比最小，处理速度最快，9压缩比最大，传输速度快，但是消耗CPU资源。
		  
		  gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
		    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
		  
		  gzip_vary on;
		    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。
		  
		  gzip_proxied any; 
		    #Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。

          limit_zone crawler $binary_remote_addr 10m; 
            #开启限制IP连接数的时候需要使用
		 ###HTTP参数之gzip模块设置

		 ###配置虚拟主机
		 ##流程： 
		    #1.复制一段完整的server标签段，到结尾。注意：要放在http的结束大括号前，也就是server标签段放入http标签。
			#2.更改server_name 及对应网页的root根目录。
			#3.检查配置文件语法，平滑重启服务。
			#4.创建server_name 对应网页的根目录，并且建立测试文件，如果没有index首页会出现403错误。
			#5.对客户端server_name 的主机做host 解析或DNS配置。并检查（ping）。
			#6.浏览器访问，或者在Linux客户端做host解析，用wget或curl 访问。
		 ##http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。
		  server{
		    listen 80 default;
		     #监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。

		    server_name _;
		     #服务器名，如localhost、www.example.com，可以通过正则匹配。

		    index index.html index.htm index.php;
		     #定义路径下默认访问的文件名，一般跟着root放。
		     
		    root /data/htdocs/www;
		     #定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。

		    #server_name_in_redirect off;
		    location ~ .*\.(php|php5)?$
		    {
		      #fastcgi_pass  unix:/tmp/php-cgi.sock;
		      fastcgi_pass  127.0.0.1:9000;
		      fastcgi_index index.php;
		      include fcgi.conf;
		    }
		    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
		    {
		      expires      30d;
		    }
		    location ~ .*\.(js|css)?$
		    {
		      expires      1h;
		    }
		  }
		}






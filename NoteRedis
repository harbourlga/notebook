#20210222
redis过期失效机制： 1⃣️积极策略 定时清理，默认时每25ms清理一次。每次清理会遍历所有db，每个db抽取20个key，如果超过4分之一即5个key则继续清理这个db，否则的话跳到下个db去清理。
                  2⃣️惰性策略：在访问key时，如果发现key已经过期，那么会将key删除

redis内存不足淘汰策略: 
					1⃣️noeviction，不删除，达到内存限制时，执行写入命令时直接返回错误信息。
					2⃣️allkeys-lru，在所有key中，优先删除最少使用的key。（适合请求符合幂定律分布，也就是一些键访问频繁，一部分键访问较少）
					3⃣️allkeys-random，在所有key中，随机删除一部分key。（适合请求分布比较平均）
					4⃣️volatile-lru，在设置了expire的key中，优先删除最少使用的key。lru,least recent use
					5⃣️volatile-random，在设置了expire的key中，随机删除一部分key。lfu, Least Frequently Used
					6⃣️volatile-ttl，在设置了expire的key中，优先删除剩余时间段的key。
					4.0版本后增加以下两种：
					7⃣️volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰。
					8⃣️allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key。

LRU和LFU算法：1⃣️LRU全称Least Recent Used,即最近最少使用。设计原则是一个元素如果近期都没被访问到，那么之后一段时间都不会被访问到。
             2⃣️LFU全称Least Frequently Used，最小频率使用。设计原则是如果一个元素最近一段时间被访问到的次数，那么之后再被访问到的概率就会加大。实现途径是给每个元素附带一个引用计数，每次元素被访问后则引用计数+1，需要淘汰数据时淘汰引用计数最小的元素。在redis中引用计数被归一化成一个0-1的概率p。

redis高性能基础： 1⃣️C 语言实现，虽然 C 对 Redis 的性能有助力，但语言并不是最核心因素。
				2⃣️纯内存 I/O，相较于其他基于磁盘的 DB，Redis 的纯内存操作有着天然的性能优势。
				3⃣️I/O 多路复用，基于 epoll/select/kqueue 等 I/O 多路复用技术，实现高吞吐的网络 I/O。
				4⃣️单线程模型，单线程无法利用多核，但是从另一个层面来说则避免了多线程频繁上下文切换，以及同步机制如锁带来的开销。

#20210225
		redis
		1⃣️单指令操作与多指令操作：set/mset; get/mget
		                      单指令操作对于多次重复传输相对于多指令消耗更多的传输时间
		                      多指令操作在单线程的情况下一次传输大量的数据在redis服务端会等待更长的时间
		2⃣️数值的增删查减：可以帮助解决分表操作问题（使用多张表存储同类型数据，但对应的主键id必须保证统一性不能重复）
		                string在redis内部存储默认是一个字符串，当遇到incr或decr时会转成数值型进行计算（如果不能转成数值，或超过了redis的数值边界会报错）
		3⃣️设置数据有效的生命周期：setex或psetex;可以通过控制数据的生命周期，来控制具有时效性的用户行为
		
		5⃣️set类型可以实现随机推荐、冷启动（srandmember)
		  set可以尝试用来做鉴权
		  set可以对网站访问量进行统计，记录不同的cookie或ip

		6⃣️redis的持久化：两种方案：
		                    第一(rdb，Redis DataBase)：redis默认的持久化方案。方式是在指定的时间间隔内，执行指定次数的写操作，则会将数据写到磁盘内。数据快照存储，将当前的数据状态进行保存，重点关注在数据
		                         配置文件：save <指定时间间隔> <执行指定次数更新操作>，满足条件就将内存中的数据同步到硬盘中。
		                                  官方出厂配置默认是 900秒内有1个更改，300秒内有10个更改以及60秒内有10000个更改，则将内存中的数据快照写入磁盘。
		                         注意事项：flushall命令(清空数据库所有数据)和shutdown命令(保证服务器正常关闭且不丢失任何数据)都会触发RDB快照
		                         优缺点：文件小、恢复快。不影响性能，实时性低，兼容性差（老版本不能兼容新版本rdb文件）

		                    第二(aof, Append Only File)：以日志的形式进行过程存储,存的是操作过程,日志内记录着每个写操作，并追加到文件中去。Redis重启的会根据日志文件的内容将写指令从前到后执行一次从而完成数据的恢复工作
		                         配置文件：非默认需手动自己开启。
		                                 在redis.conf内：appendonly yes: AOF开启
		                                                appendfilename "appendonly.aof" 指定日志文件名
		                                                appendfsync everysec 指定更新日志条件always（每次操作都写进去，慢、安全）everysec每秒异步记录一次 no不同步
		                         aof的重写机制：随着写操作越来越多，aof文件会超过所设定的阈值，redis会对aof文件进行压缩。
		                              重写的原理：通过执行BGREWRITEAOF命令，Redis 会fork出一条新进程，读取内存中的数据，并重新写到一个临时文件中。
		                              重写的触发条件：可以由用户通过调用 BGREWRITEAOF手动触发
		                                            服务器在AOF功能开启的情况下,会维持以下三个变量
															记录当前AOF文件大小的变量aof_current_size
															记录最后一次AOF重写之后,AOF文件大小的变量 aof_rewrite_base_size
															增长百分比变量 aof_rewrite_perc
													每次当 serverCron函数执行时,它都会检查以下条件是否全部满足,如果是的话,就会触发AOF重写
															没有BGSAVE命令在进行
															没有BGREWRITEAOF在进行
															当前AOF文件大小大于server.aof_rewrite_min_size (默认值1MB)
															当前AOF文件大小和最后一次AOF重写后的大小之间的比率大于等于指定的增长百分比(默认百分比为100%)
		                         优缺点：数据的完整性和一致性更高
		                                因为aof记录的内容多，文件越来越大，数据恢复也会越来越慢

		                总结:
							1.Redis 默认开启RDB持久化方式，在指定的时间间隔内，执行指定次数的写操作，则将内存中的数据写入到磁盘中。
							2.RDB 持久化适合大规模的数据恢复但它的数据一致性和完整性较差。
							3.Redis 需要手动开启AOF持久化方式，默认是每秒将写操作日志追加到AOF文件中。
							4.AOF 的数据完整性比RDB高，但记录内容多了，会影响数据恢复的效率。
							5.Reis 针对 AOF文件大的问题，提供重写的瘦身机制。
							6.若只打算用Redis 做缓存，可以关闭持久化。
							7.若打算使用Redis 的持久化。建议RDB和AOF都开启。其实RDB更适合做数据的备份，留一后手。AOF出问题了，还有RDB。
						两种方案该如何选择：
						    持久化的开启必然会带来性能上的消耗：rdb持久化操作时需要fork一个子进程，该操作会阻塞redis的主线程
						                                   aof文件大、恢复慢性能影响高，实时性高。AOF持久化主要在于将aof_buf缓冲区的数据同步到磁盘时会有I/O压力，而且向硬盘写数据的频率会高很多。
						    不同场景：1.不考虑数据丢失：不需要持久化
						             2.单机情况下，可以允许十几分钟甚至更长时间的数据丢失,可选择rdb持久化对性能的影响小。如果只能接受秒级的数据丢失则选择aof
						             3.slave服务器进行数据热备份的情况下，也是需要进行持久化的。当主从服务器同时出现故障时，假如不进行持久化会导致数据全部丢失。另外如果服务采用了自动拉起机制，在拉起master服务时由于没有持久化文件，master将会是空的，此时slave也同步成空的。应尽量避免不做持久化和自动拉起服务同时出现。
						               采用方案：a.主服务器不开启持久化，使主服务器性能更好。
						                        b.从服务器开启aof持久化，关闭rdb持久化。定时对aof文件进行备份，在凌晨时对aof文件进行重写，减小aof文件大小
						             4.异地备灾：定时把aof或rdb文件备份到其他地区的机房。

		7⃣️redis的性能：设计模式基于内存(数据结构基本采用hash查找,读取速度快),采用单线程(避免上下文切换和竞争带来的消耗)
		              通过多进程可以充分利用多核优势：单机多开几个redis实例；多机分布式改造。redis是k-v数据库，不是关系数据库，数据之间没有约束，只要client分清哪些key放在那个redis进程上就可以了
		              高吞吐量：第一：采用多路(多个socket连接)复用(复用同一个线程)技术，让单个线程高效的处理多个连接请求
		                       第二：redis在内存中操作速度快，不会影响性能瓶颈
		8⃣️redis的事务：
		              什么是事务？  事务防止在操作过程中，指令被插队、打乱等。类似mutex作用，保证事务内队列操作的原子性
		              事务的使用方式 multi(事务开始)  ---》 [队列中塞入各种操作] ---》 exec（事务结束，开始执行对列中的各种操作)
		                           discard（抛弃事务）
		              事务的异常情况：第一种：队列中有一条语法错误，则整个队列销毁
		                            第二种：队列中所有的语法都正确，则执行错误的不执行，执行正常的继续运行
		              异常情况下事务如何回滚：1⃣️记录操作过程中被影响的数据之前的状态 2⃣️设置指令恢复所有的数据
		              事务的锁：应用业务场景：监控数据变没变，没变化则执行事务，变化了则不执行事务； 
		                       使用方式：watch 需要在multi事务开始前就指定key。  unwatch取消锁
		              事务的分布式锁：应用业务场景：只能让一个客户端占据锁后，执行操作。
		                            使用方式：setnx key value
		                            死锁的解决方式: 设置锁的超时时间 expire key second ; pexpire key millisecond

redis的几种数据结构：
                 1⃣️STRINGS: 一个key对应一个value.二进制安全,可能是个数值或者是文字或序列化对象等。当是一个数值时可以进行加减等操作。
                             实战场景：
								1.缓存： 经典使用场景，把常用信息，字符串，图片或者视频等信息放到redis中，redis作为缓存层，mysql做持久化层，降低mysql的读写压力。
								2.计数器：redis是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。
								3.session：常见方案spring session + redis实现session共享。
				
				2⃣️HASH:是一个map，其value本身又是一个键值对格式。
				       所有hash的命令都是h开头的hget、hset、hdel等
				       实战场景：
								1.缓存： 能直观，相比string更节省空间，的维护缓存信息，如用户信息，视频信息等。
				
				3⃣️链表：用来保存多个字符串的元素。list(redis使用双端链表实现list),有序、value可以重复，可以通过下标取出对应的value值，左右两边都能进行插入和删除数据。
                       结构图：
                                    LPUSH               RPUSH
                                     |                   |
                                     |                   |
                            key-----》b-----a-----b-----a
                                     |                   |
                                     |                   |
                                    LPOP                RPOP
                       使用列表的技巧
						lpush+lpop=Stack(栈)
						lpush+rpop=Queue（队列）
						lpush+ltrim=Capped Collection（有限集合） （ltrim对一个列表进行修剪让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。下标0为第一个元素，-1是最后一个元素）
						lpush+brpop=Message Queue（消息队列） （brpop阻塞式等待超时或发现可弹出元素）
					   实战场景：
                        1.timeline：例如微博的时间轴，有人发布微博，用lpush加入时间轴，展示新的列表信息。
                
                4⃣️集合：同list一样也是用来保存多个元素。特性：不允许有重复元素；集合中的元素是无序的不能通过索引下标获取元素；支持集合间的操作，如集合之间取交集、并集、差集
                        实战场景;
						1.标签（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。
						2.点赞，或点踩，收藏等，可以放到set中实现

				5⃣️有序集合：有序集合和集合有着必然的联系，保留了集合的不可重复的性质。特性：有序集合是可以排序的，它为每个元素设置了一个分数，作为排序的依据。该分数是可以重复的
				        实战场景：
                        1.排行榜：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。

                        zset的原理：1.当数据量不太多时保存元素数量少于128，并且每个元素长度小于64个字节，由压缩列表ziplist实现。
                                   2.数据量大时，使用跳表和字典实现。字典的键保存元素的值，字典的值则保存元素的分值；跳跃表节点的object属性保存元素的值，跳跃表节点的score属性保存元素的分值。


redis的几种重要底层结构：
                1⃣️压缩列表：是redis为了节约内存而开发的，由一系列特殊编码的连续内存块组成的顺序型数据结构
                      组成：
                         zlbytes：记录整个压缩列表占用的内存字节数，在对压缩列表进行内存重分配,或者计算zlend的位置时使用
                         zltail:记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过该offset，程序无需遍历整个压缩列表就可以确认表尾节点的地址
                         zllen:记录压缩列表的节点数量，当等于UINT16_MAX(65535)时，真实数量可能需要重新遍历
                         entryX：压缩列表的各个节点，节点长度由存储的内容大小决定
                         zlend：用于标记压缩列表的末端
                2⃣️跳跃表：跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。

                3⃣️rehash：当redis的hash表数据越来越多的时候，就会发生扩容，也就是rehash。与别的一次性扩容不同，redis采用的是渐进式hash的方式。
                          组成：hash表底层维护了两个数组，ht[0]是未扩容前的数组，ht[1]扩容后的数组。另外还有个rehashidx数组索引来控制rehash
                                每次的增删改查，rehashidx+1，然后执行对应原hash表rehashidx索引位置的rehash
                          目的：在扩容或收缩的时候，如果hash表有很多元素，一次性将这些键全部rehash到ht[1]会造成服务器压力导致在一定时间内停止服务。
                                采用渐进式rehash的方式：a.为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表
                                                      b. 将rehashindex的值设置为0，表示rehash工作正式开始
													 c.在rehash期间，每次对字典执行增删改查操作是，程序除了执行指定的操作以外，还会顺带将ht[0]
													       哈希表在rehashindex索引上的所有键值对rehash到ht[1]，当rehash工作完成以后，rehashindex的值+1
                                                     d.随着字典操作的不断执行，最终会在某一时间段上ht[0]的所有键值对都会被rehash到ht[1]，这时将rehashindex的值设置为-1，表示rehash操作结束
                          原理：采用分而治之的理念，将rehash的操作分摊到每一个的访问中，避免集中式rehash而带来的庞大计算量
                          注意事项：在rehash的过程中，有增删查改时，如果index大于rehashidx，则访问ht[0],否则访问ht[1]

redis缓存击穿、缓存穿透、缓存雪崩：
                1⃣️缓存穿透：查询一个一定不存在的数据，当在缓存中查询不到时，会尝试去db中读取。这就导致不存在的数据每次都要去db中查询，失去了缓存的意义。当流量大时，db可能就会挂掉，有人可能会利用不存在的key频繁攻击。
                          解决方案：a.布隆过滤器，将所有的key都哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉。
                                   b.将db查询返回的空数据进行缓存，过期时间设的很短最长不超过5分钟。
                2⃣️缓存雪崩：多个缓存key设置了相同的过期时间刚好都同时过期，导致请求全都转发到db，导致db瞬时压力过大雪崩
                           解决方案：a.用加锁或队列的形式，保证写缓存时单线程（进程）写，避免大量并发请求同时落到db上。
                                   b.失效时间增加一个随机值比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。
                3⃣️缓存击穿：对于一些设置了过期时间的key，若访问量非常大，在过期瞬间大量请求进来会转发到底层数据库，大量请求可能会把后端数据库压垮
                           解决方案：a.上锁。在某一时刻只能有一个对象拥有锁。当第一个线程从db中读完数据并写入缓存之后，后面的请求再继续从缓存中读。
                                           缺点：存在死锁的风险、代码复杂度增大、存在线程池阻塞的风险
                                   b.让key永远不过期：
                                          两种情况：1.在redis上就不设置过期时间，这就保证了热点key永远不会过期。
                                                   2.逻辑层面不过期，把过期时间跟key对应的value写在一起，如果发现了该key快过期了，通过一个后台的异步线程进行缓存的构建。
                                          优点：性能优好，改造难度小
                                          缺点：一致性较差，其余线程（非构建缓存的线程）访问的可能还是老数据，一般的服务还是能够容忍
                                    c.使用资源隔离组件：hystrix
                                          优点：1. hystrix技术成熟，有效保证后端。
                                                2. hystrix监控强大。
                                          缺点：部分访问存在降级策略

RESP:全称Redis Serialization Protocol --- redis序列化协议
     RESP协议仅用作于redis客户端和服务端通信，服务端不同节点之间通信用另一套协议。
     传输层基于tcp协议，默认端口为6379
     支持五种数据类型：简单字符串类型(Simple Strings)以+开头、错误类型 (Errors)以-开头、整型(Integers)以:开头、批量字符串类型(Bulk Strings)以$开头、数组类型(Arrays)以*开头

redis几种架构模式：
     1⃣️单机版：内存容量有限；无法高可用；处理能力有限
     2⃣️主从复制：redis实现了一个replication功能，该功能允许用户根据一个redis服务器来创建任意多个该服务器的复制品。
                slave：replication创建出来的复制品；master被复制的主服务器
                只要主从服务器之间网络正常，主服务器就会一直将发生在自己身上的数据同步给slave，从而保证master和slave之间的数据同步。
               优点：主要是降低master读的压力
               缺点：无法保证高可用、没有解决master写的压力
     3⃣️哨兵模式：redis sentinel是一个分布式redis主从服务器的监控，能够在主服务器故障下线时自动进行故障转移
                具有三个特性：a.监控（monitoring）,sentinel会不断的检查master和slave是否运作正常
                            b.提醒(notification),当被监控的某个redis服务器出现问题时, sentinel可以通过api向管理员或者其他应用程序发送通知
                            c.自动故障迁移(automatic failover),当一个主服务器不能正常工作时，sentinel会开始一次自动故障迁移操作
                优点：高可用、可监控各个节点、自动故障迁移
                缺点：主从模式下，主从切换需要时间可能会导致丢失数据；没有解决master写的压力
                
                **HOW：1.定时探询主节点是否主观下线：每隔2s，哨兵节点会给主节点发送PING命令，如果在一定时间间隔内，都没有收到回复，那么哨兵节点就认为主节点主观下线
                       2.认定主节点是否客观下线：哨兵节点认为主节点主观下线之后，会向其他哨兵节点发送sentinel is-master-down-by-addr命令，获取其他哨兵节点对该主节点的状态，当认定主节点下线的哨兵数量达到一定数值时，就认定主节点客观下线。
                       3.进行领导这哨兵选举。选举使用的是Raft算法。认定主节点客观下线后,各个哨兵之间相互通信，选举出一个领导者哨兵，由它来对主节点进行故障转移操作。
                       4.领导者哨兵进行故障转移：会从slave中选者一个健康的节点作为新的主节点。
                                              健康节点的标准是：1.先排除一些不健康的节点，如下线的、断线的、最近5S没有回复哨兵节点的info命令的、与旧的master断了连接较长时间的。
                                                             2.根据优先级，复制偏移量,runid最小的来选出一个slave作为master
                                              向这个slave发送slaveof no one命令，让其成为直接点，通过slaveof命令让其他从节点认定它为主节点，并将已下线的主节点更新为新主节点的从节点。

     4⃣️集群(proxy型):Twemproxy 是一个Twitter开源的一个redis和memcache 快速/轻量级代理服务器,Twemproxy是一个快速的单线程代理程序,支持 Memcached ASCII 协议和redis协议
                优点：多种hash算法: MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins
                     支持失败节点自动删除
                     后端Sharding 分片逻辑对业务透明,业务方的读写方式和操作单个Redis一致
                缺点：增加了新的proxy,需要维护其高可用
                     failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预
     5⃣️集群(redis cluster)：从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。
                优点：   无中心结构(不存在哪个节点影响性能瓶颈),少了proxy层
						数据按照slot存储分布在多个节点,节点间数据共享,可动态调整数据分布
						可扩展性,可线性扩展到1000个节点,节点可动态添加和删除
						高可用性,部分节点不可用时,集群仍可用,通过添加Slave做备份数据副本
						实现故障自动failover,节点之间通过gossip协议交换状态信息,用投票机制完成Slave到Master的角色提升
			    缺点：资源隔离性较差,容易出现相互影响的情况
			         数据通过异步复制,不保证数据的强一致性

			    hash槽：作用:将key通过算法转化在分布式系统中找到对应的节点
			            该算法在redis设计的基本思想：1.一共有16384个槽(作者经验得出的)，每个节点(服务器)分配到其中的一部分。
			                                      2.插入一个数据时，先根据crc16算法计算key的值，然后用该值对mod取余数，计算结果可确定数据要放到那个槽中。
			                                      3.在新增节点的时候，需要重新分配槽的区间，此时旧节点的槽区间会收缩。旧节点的数据需要迁出到槽对应的新节点。
			                                      4.客户端可以向任何一个redis节点发送请求，然后由节点将请求重定向到正确的节点上去。
			   ***什么是CAP: 1.一致性(Consistency)在分布式系统中的所有数据备份，在同一时刻是否有同样的值。(等同于所有节点访问同一份最新的数据副本)
			                2.可用性(Availablity)在集群的一部分节点故障之后，集群整体是否还能响应客户端的读写请求（对数据更新具备高可用性）
			                3.分区容错性(Partition tolerance)以实际效果而言,分区相当于对通信的时限要求,系统如果不能在时限内达成数据的一致性,
			                就意味着发生了分区的情况,必须就当前操作在C和A之间做出选择
			                
			                总结：CAP理论就是说在分布式存储系统中,最多只能实现上面的两点!









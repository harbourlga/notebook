netfilter/iptables

netfilter，linux位于内核空间的防火墙安全框架
Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：
1⃣️网络地址转换(Network Address Translate)NAT z
2⃣️数据包内容修改
3⃣️数据包过滤的防火墙功能
iptables是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架

iptables的五个关卡(链):input、output、prerouting、forward、postrouting
关卡的场景,即报文的流向:
	到本机某进程的报文：PREROUTING --> INPUT
	由本机转发的报文：PREROUTING --> FORWARD --> POSTROUTING
	由本机的某进程发出报文（通常为响应报文）：OUTPUT --> POSTROUTING

关卡为啥称为链:每个关卡上可能有很多个匹配规则或执行相关的动作，这些方法在单个关卡上是串行的，某个报文进来要经过该关卡所有的方法才能通过

iptables表的概念:每个链上有许多不同的方法，这些方法可以分成几种不同的类别，每个类别可以称为一张表，该类别表下的规则功能都相同只是处理的业务内容不同
				filter表：负责过滤功能，防火墙；内核模块：iptables_filter
				nat表：network address translation，网络地址转换功能；内核模块：iptable_nat
				mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle
				raw表：关闭nat表上启用的连接追踪机制；iptable_raw

链的规则存放于哪些表中（从链到表的对应关系）：
PREROUTING   的规则可以存在于：raw表，mangle表，nat表。
INPUT        的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。
FORWARD      的规则可以存在于：mangle表，filter表。
OUTPUT       的规则可以存在于：raw表mangle表，nat表，filter表。
POSTROUTING  的规则可以存在于：mangle表，nat表。
 
 
表中的规则可以被哪些链使用（从表到链的对应关系）：
raw     表中的规则可以被哪些链使用：PREROUTING，OUTPUT
mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING
nat     表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）
filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT

规则由匹配条件和处理动作组成
匹配条件分为基本匹配条件和扩展匹配条件
		基本匹配条件：
		源地址Source IP，目标地址 Destination IP
		上述内容都可以作为基本匹配条件。
		扩展匹配条件：
		除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。
		源端口Source Port, 目标端口Destination Port
		上述内容都可以作为扩展匹配条件
处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。
		此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：
		ACCEPT：允许数据包通过。
		DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。
		REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。
		SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。
		MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。
		DNAT：目标地址转换。
		REDIRECT：在本机做端口映射。
		LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。
 

 


iptables操作
查看表的操作: iptables -t filter -L   使用-t选项，指定要操作的表，使用-L选项，查看-t选项对应的表的规则，-L选项的意思是，列出规则
            iptables -L 不使用-t选项默认是查看filter表
            iptables -L INPUT 	为表指定链的操作
            iptables -vL INPUT 使用-v选项，查看出更多的、更详细的信息
            iptables -nvl 使用-n选项IP地址进行名称反解，直接显示IP地址
            iptables --line-number -nvL 使用--line-numbers即可显示规则的编号，可缩写为--line
            iptables -nvxl 使用-x显示精确的计数

清空规则的操作： iptables -F INPUT   命令清空filter表INPUT链中的规则，-F默认清空filter表，若要清空别的表后面接别的表名

增加规则(规则靠前的先执行)：
       iptables -t filter -I INPUT -s 111.229.31.222 -j DROP  
				使用 -t选项指定了要操作的表，此处指定了操作filter表，与之前的查看命令一样，不使用-t选项指定表时，默认为操作filter表。
				使用-I选项，指明将"规则"插入至哪个链中，-I表示insert，即插入的意思,插入到首部，所以-I INPUT表示将规则插入于INPUT链中，即添加规则之意。
				使用-s选项，指明"匹配条件"中的"源地址"，即如果报文的源地址属于-s对应的地址，那么报文则满足匹配条件，-s为source之意，表示源地址。
				使用-j选项，指明当"匹配条件"被满足时，所对应的动作，上例中指定的动作为DROP，在上例中，当报文的源地址为192.168.1.146时，报文则被DROP（丢弃）。
	   iptables -A INPUT -s 111.229.31.222 -j ACCEPT
	            使用-A选项，表示在对应的链中"追加规则"，-A为append之意，所以，-A INPUT则表示在INPUT链中追加规则，而之前示例中使用的-I选项则表示在链中"插入规则"，它们的本意都是添加一条规则，只是-A表示在链的尾部追加规则，-I表示在链的首部插入规则而已。
	   iptables -t filter -I INPUT 2 -s 111.229.31.222 -j DROP
	            指定新增规则的编号，就能在任意位置插入规则了
d
删除规则(可以按序号或指定动作进行删除):
       iptables -t filter -D INPUT 3
                指定删除的序号
       iptables -D INPUT -s 111.229.31.222 -j DROP
                指定删除的source和执行的动作(只能删除一个最靠前的，不能删除重复的)
       iptables -t 表名 -F 链名
                删除指定链的全部规则

修改规则(-R选项表示修改指定的链):
       iptables -t filter -R INPUT -s 111.229.31.222 -j REJECT
                -s选项以及对应的源地址不可省略，即使我们已经指定了规则对应的编号，但是在使用-R选项修改某个规则时，必须指定规则对应的原本的匹配条件（如果有多个匹配条件，都需要指定）。
				如果上例中的命令没有使用-s指定对应规则中原本的源地址，那么在修改完成后，你修改的规则中的源地址会自动变为0.0.0.0/0（此IP表示匹配所有网段的IP地址），而此时，-j对应的动作又为REJECT，所以在执行上述命令时如果没有指明规则原本的源地址，那么所有IP的请求都被拒绝了（因为没有指定原本的源地址，当前规则的源地址自动变为0.0.0.0/0），如果你正在使用ssh远程到服务器上进行iptables设置，那么你的ssh请求也将会被阻断。
	   iptables -t filter -P FORWARD DROP
	            使用-t指定要操作的表，使用-P选项指定要修改的链，-P FORWARD DROP表示将表中FORWRD链的默认策略改为DROP。

匹配条件的更多用法:
       匹配条件：目标IP地址
       iptables -t filter -I INPUT -s 111.229.31.222,111.229.31.221 -j DROP
                在指定源地址时，一次指定多个，用"逗号"隔开即可
       iptables -t filter -I INPUT -s 111.229.31.222/14 -j DROP
                除了能指定具体的IP地址，还能指定某个网段，如果报文的源地址IP在111.229.31.222/14网段内，当报文经过INPUT链时就会被DROP掉。
       iptables -t filter -I INPUT ! -s 111.229.31.222 -j ACCEPT
                使用"! -s 111.229.31.222"表示对 -s 111.229.31.222这个匹配条件取反， -s 111.229.31.222表示报文源IP地址为111.229.31.222即可满足匹配条件，使用 "!" 取反后则表示，报文源地址IP只要不为111.229.31.222即满足条件，那么，上例中规则表达的意思就是，只要发往本机的报文的源地址不是111.229.31.222，就接受报文。
                111.229.31.222如果在后续的规则里没有被拒绝，那么会遵守INPUT链默认的动作
       iptables -t filter -s 111.229.31.222 -d 172.81.224.214 -j DROP
                使用-d选项指定"目标地址"作为匹配条件。源地址表示报文从哪里来，目标地址表示报文要到哪里去。
                总结：如果指定-s不指定-d则对匹配到的源地址传来的报文执行指定动作；如果不指定-s指定-d则所有发向目标地址的报文都会执行指定动作；如果都指定了则按照源地址和目标地址都满足匹配条件来执行动作
                当一条规则中有多个匹配条件时，这多个匹配条件之间，默认存在"与"&&的关系。
       
       匹配条件：协议类型
       iptables -I INPUT -s 111.229.31.222 -d 172.17.0.4 -p tcp -j REJECT
                使用-p选项，指定需要匹配的报文的协议类型。
                ping命令使用icmp协议;ssh协议的传输层协议属于tcp协议类型;此时只能匹配到tcp协议的规则 

       匹配条件：网卡接口
       iptables -t filter -I INPUT -i eth4 -p icmp -j drop
                使用-i选项，指定网卡名称，使用-p选项，指定了需要匹配的报文协议类型，上例表示丢弃由eth4网卡流入的icmp类型的报文。
       iptables -t filter -I OUTPUT -o eth4 -p icmp -j drop
                当主机有多块网卡时，可以使用-o选项，匹配报文将由哪块网卡流出，没错，-o选项与-i选项是相对的，-i选项用于匹配报文从哪个网卡流入，-o选项用于匹配报文将从哪个网卡流出。

       扩展匹配条件：
	       iptables -t filter -I INPUT -s 111.229.31.222 -p tcp -m tcp --dport 22 -j REJECT
	                使用选项--dport可以匹配报文的目标端口，--dport意为destination-port，即表示目标端口。
	                -m tcp表示使用tcp扩展模块，--dport表示tcp扩展模块中的一个扩展匹配条件，可用于匹配报文的目标端口。
	                使用扩展匹配条件--dport指定了目标端口，在使用扩展匹配条件的时候，如果没有使用-m指定使用哪个扩展模块，iptables会默认使用"-m 协议名"，而协议名就是-p选项对应的协议名
	       iptables -t filter -I INPUT -s 111.229.31.222 -p tcp --sport 22 -j REJECT
	                代表"源端口"的扩展匹配条件为--sport
	       iptables -t filter -I INPUT -s 111.229.31.222 -p tcp --sport 22:25 -j REJECT
	                22:25表示目标端口为22到25之间的所有端口;
	       iptables -t filter -I INPUT -s 111.229.31.222 -p tcp -m multiport --dports 22,64,99 -j REJECT
	                借助tcp扩展模块的--sport或者--dport都可以指定一个连续的端口范围，但是无法同时指定多个离散的、不连续的端口，如果想要同时指定多个离散的端口，需要借助另一个扩展模块，"multiport"模块。
	                -m multiport是不能省略的;multiport扩展只能用于tcp协议与udp协议，即配合-p tcp或者-p udp使用
					我们可以使用multiport模块的--sports扩展条件同时指定多个离散的源端口。
					我们可以使用multiport模块的--dports扩展条件同时指定多个离散的目标端口。
		   iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN -j REJECT
		            "--tcp-flags"就是我们今天要讨论的扩展匹配条件，用于匹配报文tcp头部的标志位。
		            第一部分为"SYN,ACK,FIN,RST,URG,PSH"，第二部分为"SYN"。
					第一部分表示：我们需要匹配报文tcp头中的哪些标志位，那么上例的配置表示，我们需要匹配报文tcp头中的6个标志位，这6个标志位分别为为"SYN、ACK、FIN、RST、URG、PSH"，我们可以把这一部分理解成需要匹配的标志位列表。
					第二部分表示：第一部分的标志位列表中，哪些标志位必须为1，上例中，第二部分为S YN，则表示，第一部分需要匹配的标志位列表中，SYN标志位的值必须为1，其他标志位必须为0。
		   iptables -t filter -I INPUT -p udp -m udp --dport 137:157 -j DROP
		            通tcp

	   icmp扩展：ICMP协议的全称为Internet Control Message Protocol，翻译为互联网控制报文协议，它主要用于探测网络上的主机是否可用，目标是否可达，网络是否通畅，路由是否可用等。
                iptables -t filter -I INPUT -p icmp -j REJECT 
                     使用"-p icmp"匹配了所有icmp协议类型的报文,服务端和客户端双方无法ping通
                iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8/0 -j REJECT
                     此时别人不能ping通本机，本机能ping通别人
                     "--icmp-type 8/0"表示icmp报文的type为8，code为0才会被匹配到，也就是只有ping请求类型的报文才能被匹配到 
                iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8 -j REJECT
                     因为type为8的类型下只有一个code为0的类型，所以我们可以省略对应的code
                iptables -t filter -I INPUT -p icmp -m icmp --icmp-type "echo-request" -j REJECT
	   iprange扩展模块：
	   iptables -t filter -I INPUT -m --src-range 192.169.1.127-192.169.1.140 -j REJECT
	            iprange扩展模块中有两个扩展匹配条件可以使用  --src-range   --dst-range
	   string扩展模块:
	   iptables -t filter -I INPUT -m string --algo bm --string "OOXX" -j REJECT
	            '-m string'表示使用string模块;'--algo bm'表示使用bm算法去匹配指定的字符串,可选的算法有bm与kmp;' --string "OOXX" '则表示我们想要匹配的字符串为"OOXX"


iptables扩展模块之state扩展:
       对于state模块的连接而言，"连接"其中的报文可以分为5种状态，报文状态可以为NEW、ESTABLISHED、RELATED、INVALID、UNTRACKED
       NEW：连接中的第一个包，状态就是NEW，我们可以理解为新连接的第一个包的状态为NEW。
	   ESTABLISHED：我们可以把NEW状态包后面的包的状态理解为ESTABLISHED，表示连接已建立。
       RELATED：从字面上理解RELATED译为关系,可能在服务端存在两个进程，其中一个进程的报文跟另个进程相关
       INVALID：如果一个包没有办法被识别，或者这个包没有任何状态，那么这个包的状态就是INVALID，我们可以主动屏蔽状态为INVALID的报文。
       UNTRACKED：报文的状态为untracked时，表示报文未被追踪，当报文的状态为Untracked时通常表示无法找到相关的连接。
       
       iptables -t filter -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
                只要放行状态为RELATED或ESTABLISHED的报文即可，因为如果报文的状态为ESTABLISHED，那么报文肯定是之前发出的报文的回应
                表示只有回应我们的报文能够通过防火墙，如果是别人主动发送过来的新的报文，则无法通过防火墙

iptables的黑白名单机制:
       黑名单对应默认策略ACCRPT,链中的规则对应的动作应该为DROP或者REJECT，表示只有匹配到规则的报文才会被拒绝，没有被规则匹配到的报文都会被默认接受。
       白名单对应默认策略DROP,链中的规则对应的动作应该为ACCEPT，表示只有匹配到规则的报文才会被放行，没有被规则匹配到的报文都会被默认拒绝。
       实际操作中，白名单默认策略也设置为ACCEPT，然后将"拒绝所有请求"这条规则放在链的尾部，将"放行规则"放在前面，这样做，既能实现"白名单"机制，又能保证在规则被清空时，管理员还有机会连接到主机。

iptables自定义链：
       iptables -t filter -N IN_WEB
              "-N IN_WEB"表示创建一个自定义链，自定义链的名称为"IN_WEB";
              需要默认链引用才能
       iptables -I INPUT -p tcp --dport 80 -j IN_WEB
              当"-j"对应的值为一个自定义链时，就表示被当前规则匹配到的报文将交由对应的自定义链处理，具体怎样处理，取决于自定义链中的规则，当IN_WEB自定义链被INPUT链引用以后，可以发现，IN_WEB链的引用计数已经变为1，表示这条自定义链已经被引用了1次，自定义链还可以引用其他的自定义链
       iptables -E IN_WEB WEB
              修改自定义链的名字
       iptables -X IN_WEB
              使用"-X"选项可以删除自定义链，但是删除自定义链时，需要满足两个条件：
				1、自定义链没有被任何默认链引用，即自定义链的引用计数为0。
				2、自定义链中没有任何规则，即自定义链为空。